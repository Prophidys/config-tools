#!/bin/bash -x
#---------------------------------------------------------------
# Project         : Javelin
# File            : javelin
# Copyright       : (C) 2015 by
# Author          : Joe H. Rahme
# Created On      : Jan 23 2015
# Purpose         : Use Javelin for testing
#---------------------------------------------------------------

source /etc/config-tools/openrc.sh
here=$(dirname $(readlink -m $0))

tempest_dir="/usr/share/openstack-tempest-juno"
resourcefile="javelin-resource.yml"
lastjavelin="/opt/tempest-scripts/javelin-latest-run"   # Make sure that this file survives upgrades by mentioning it in edeploy metadata

if [ -x /usr/local/bin/javelin2 ]; then
  JAVELIN_CMD="javelin2"
else
  export PYTHONPATH=/usr/share/openstack-tempest-juno
  JAVELIN_CMD="python /usr/share/openstack-tempest-juno/tempest/cmd/javelin.py"
fi

if /usr/bin/extract.py config.floating_network_name /etc/config-tools/global.yml; then
    floating_network_name=$(/usr/bin/extract.py config.floating_network_name /etc/config-tools/global.yml)
    floating_network_start=$(/usr/bin/extract.py config.floating_network_start /etc/config-tools/global.yml)
    floating_network_end=$(/usr/bin/extract.py config.floating_network_end /etc/config-tools/global.yml)
    floating_network_gateway=$(/usr/bin/extract.py config.floating_network_gateway /etc/config-tools/global.yml)
    floating_network_subnet=$(/usr/bin/extract.py config.floating_network_subnet /etc/config-tools/global.yml)
fi

javelin_manage_resourcefile () {
    # Javelin resource file does not exist, we create it
    if [ ! -r "$resourcefile" ]; then
        # if we manage external network
        if [ ! -z "$floating_network_name" ]; then
            cp $here/javelin-with-external-network.yaml $resourcefile
            sed -i "s/fakepublicnetwork/$floating_network_name/g" $resourcefile
            # we ensure external network exist
            if ! neutron net-list | grep $floating_network_name; then
                neutron net-create  --shared $floating_network_name -- --router:external=True
                neutron subnet-create $floating_network_name --allocation-pool start=$floating_network_start,end=$floating_network_end --gateway=$floating_network_gateway --enable_dhcp=False $floating_network_subnet
            fi
        # otherwise we don't manage external network
        else
            cp $here/javelin-without-external-network.yaml $resourcefile
        fi
    fi
}

javelin_cleanup() {
    rm "$resourcefile"
}

javelin_cmd() {

    local cmd=$1

    if [ "$cmd" != "create" -a "$cmd" != "destroy" -a "$cmd" != "check" ]; then
	echo "Invalid $cmd"
	return 1
    fi
    javelin_manage_resourcefile

    $JAVELIN_CMD -d . -r "$(echo $resourcefile)" -c "$tempest_dir"/etc/tempest.conf -m "$1"
}

javelin_check_resources() {
    javelin_cmd check
    return $?
}

javelin_create_resources() {
    javelin_cmd create
}

javelin_destroy_resources() {
    javelin_cmd destroy
}

javelin_is_post_upgrade() {
    # Javelin needs to determine whether it's running pre or post an upgrade
    # To do this it will compare the current version (given by edeploy) to the last
    # one it wrote in its own special file ($lastjavelin).
    # If the versions don't match, it means it's running post upgrade and it will update the
    # content of $lastjavelin to the latest

    # returns 0 if it's post upgrade (and versions don't match) or 1 if it's not the case

    if [ ! -r "$lastjavelin" ]; then
	edeploy version | cut -d "-" -f 2 > "$lastjavelin"
	return 1
    else
      local last_javelin_version=$(head -n 1 "$lastjavelin")
      local current_version=$(edeploy version | cut -d "-" -f 2)

      if [ "$last_javelin_version" != "$current_version" ]; then
          return 0
      else
          return 1
      fi
    fi
}

javelin_update_lastjavelin() {
    edeploy version | cut -d "-" -f 2 > "$lastjavelin"
}
