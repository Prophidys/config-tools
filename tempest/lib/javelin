#!/bin/bash -x
#---------------------------------------------------------------
# Project         : Javelin
# File            : javelin
# Copyright       : (C) 2015 by
# Author          : Joe H. Rahme
# Created On      : Jan 23 2015
# Purpose         : Use Javelin for testing
#---------------------------------------------------------------

source /etc/config-tools/openrc.sh

tempest_dir="/usr/share/openstack-tempest-juno"
resourcefile="javelin-resource.yml"
lastjavelin="/opt/tempest-scripts/javelin-latest-run"   # Make sure that this file survives upgrades by mentioning it in edeploy metadata

if [ -x /usr/local/bin/javelin2 ]; then
  JAVELIN_CMD="javelin2"
else
  export PYTHONPATH=/usr/share/openstack-tempest-juno
  JAVELIN_CMD="python /usr/share/openstack-tempest-juno/tempest/cmd/javelin.py"
fi

javelin_get_or_create_resourcefile () {
    if [ ! -r "$resourcefile" ]; then
	cat > "$resourcefile" <<EOF
# This is a yaml description for the most basic definitions
# of what should exist across the resource boundary. Perhaps
# one day this will grow into a Heat resource template, but as
# Heat isn't a known working element in the upgrades, we do
# this much simpler thing for now.

tenants:
  - javelin
  - discuss

users:
  - name: javelin
    pass: gungnir
    tenant: javelin
  - name: javelin2
    pass: gungnir2
    tenant: discuss

secgroups:
  - name: angon
    owner: javelin
    description: angon
    rules:
      - 'icmp -1 -1 0.0.0.0/0'
      - 'tcp 22 22 0.0.0.0/0'
  - name: baobab
    owner: javelin
    description: baobab
    rules:
      - 'tcp 80 80 0.0.0.0/0'

# resources that we want to create
images:
  - name: javelin_cirros
    owner: javelin
    imgdir: images
    file: cirros-0.3.2-x86_64-blank.img
    format: ami
    aki: cirros-0.3.2-x86_64-vmlinuz
    ari: cirros-0.3.2-x86_64-initrd
volumes:
  - name: assegai
    server: peltast
    owner: javelin
    gb: 1
    device: /dev/vdb
  - name: pifpouf
    server: hoplite
    owner: javelin
    gb: 2
    device: /dev/vdb
networks:
  - name: world1
    owner: javelin
  - name: world2
    owner: javelin
subnets:
  - name: subnet1
    range: 10.1.0.0/24
    network: world1
    owner: javelin
  - name: subnet2
    range: 192.168.1.0/24
    network: world2
    owner: javelin
routers:
  - name: connector
    owner: javelin
    gateway: true
    subnet:
      - subnet1
      - subnet2
servers:
  - name: peltast
    owner: javelin
    flavor: m1.small
    image: javelin_cirros
    networks:
      - world1
    secgroups:
      - angon
      - baobab
  - name: hoplite
    owner: javelin
    flavor: m1.medium
    image: javelin_cirros
    networks:
      - world2
    secgroups:
      - angon
objects:
  - container: jc1
    name: javelin1
    owner: javelin
    file: /etc/hosts
telemetry: true
EOF
    fi

    echo "$resourcefile"
}

javelin_cleanup() {
    rm "$resourcefile"
}

javelin_cmd() {

    local cmd=$1

    if [ "$cmd" != "create" -a "$cmd" != "destroy" -a "$cmd" != "check" ]; then
	echo "Invalid $cmd"
	return 1
    fi

    $JAVELIN_CMD -d . -r "$(javelin_get_or_create_resourcefile)" -c "$tempest_dir"/etc/tempest.conf -m "$1"
}

javelin_check_resources() {
    javelin_cmd check
    return $?
}

javelin_create_resources() {
    javelin_cmd create
}

javelin_destroy_resources() {
    javelin_cmd destroy
}

javelin_is_post_upgrade() {
    # Javelin needs to determine whether it's running pre or post an upgrade
    # To do this it will compare the current version (given by edeploy) to the last
    # one it wrote in its own special file ($lastjavelin).
    # If the versions don't match, it means it's running post upgrade and it will update the
    # content of $lastjavelin to the latest

    # returns 0 if it's post upgrade (and versions don't match) or 1 if it's not the case

    if [ ! -r "$lastjavelin" ]; then
	edeploy version | cut -d "-" -f 2 > "$lastjavelin"
	return 1
    else
      local last_javelin_version=$(head -n 1 "$lastjavelin")
      local current_version=$(edeploy version | cut -d "-" -f 2)

      if [ "$last_javelin_version" != "$current_version" ]; then
          return 0
      else
          return 1
      fi
    fi
}

javelin_update_lastjavelin() {
    edeploy version | cut -d "-" -f 2 > "$lastjavelin"
}
